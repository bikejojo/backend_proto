"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
    
    clientes_externos:[Cliente_Externo!]! @hasMany
    tecnicos:[Tecnico!]! @hasMany

}

type Cliente_Externo {
  id: ID!
  nombre:String!
  email:String!
  metodo_login:String!
  foto:String!
  #ciudades_id:String!
  #users_id:String!
  users:User! @belongsTo
  ciudades:Ciudad! @belongsTo
}

type Tecnico {
  id: ID!
  nombre: String!
  apellido: String!
  carnet_anverso: String!
  carnet_reverso: String!
  correo: String!
  contrasenia: String!
  foto: String!
  #ciudades_id:String!
  ciudades:Ciudad! @belongsTo
  users:User! @belongsTo
}

type Ciudad {
  id: ID!
  descripcion: String!

  clientes_externos: [Cliente_Externo!]! @hasMany
  tecnicos: [Tecnico!]! @hasMany
}

type Habilidad {
  id: ID!
  nombre: String!

  preferencia_habilidad: [Preferencia_Habilidad!]! @hasMany
}
type Preferencia_Habilidad{
  habilidad: Habilidad! @belongsTo
  cliente_externo: Cliente_Externo! @belongsTo
}
type Mutation {
  #CRUD users
  createUser(name: String!,email:String!,password:String!): User @field(resolver:"UserMutations@create")
  updateUser(id:ID! ,name: String!,email:String!,password:String!): User @field(resolver:"UserMutations@update")
  deleteUser(id:ID! @whereKey): Response @field(resolver:"UserMutations@delete")

  login(email:String!,password:String!): String @field(resolver: "UserMutations@login")

  #CRUD cliente_externo
  createCliente(nombre:String!,email:String!,metodo_login:String!,foto:String!,users_id:String!,ciudades_id:String!): Cliente_Externo @field(resolver:"ClienteExternoMutations@create")
  updateCliente(id:ID!,nombre:String!,email:String!,metodo_login:String!,foto:String!,users_id:String!,ciudades_id:String!): Cliente_Externo @field(resolver:"ClienteExternoMutations@update")
  deleteCliente(id:ID! @whereKey): Response @field(resolver:"ClienteExternoMutations@delete")

  #CRUD tecnicos
  createTecnico(nombre:String!,apellido:String!,carnet_anverso:String!,carnet_reverso:String!,correo:String!,contrasenia:String!,foto:String!,users_id:String!,ciudades_id:String!): Tecnico @field(resolver:"TecnicoMutations@create")
  updateTecnico(id:ID!,nombre:String!,apellido:String!,carnet_anverso:String!,carnet_reverso:String!,correo:String!,contrasenia:String!,foto:String!,users_id:String!,ciudades_id:String!): Tecnico @field(resolver:"TecnicoMutations@update")
  deleteTecnico(id:ID! @whereKey): Response @field(resolver:"TecnicoMutations@delete")

  #CRUD ciudad
  createCiudad(descripcion:String! ):Ciudad @field(resolver:"CiudadMutations@create")
  updateCiudad(id:ID!,descripcion:String!):Ciudad @field(resolver:"CiudadMutations@create")
  deleteCiudad(id:ID! @whereKey):Ciudad @field(resolver:"CiudadMutations@create")

  #CRUD habilidades
  createHabilidad(nombre:String!):Habilidad @field(resolver:"HabilidadMutations@create")
  updateHabilidad(id:ID!,nombre:String!):Habilidad @field(resolver:"HabilidadMutations@create")
  deleteHabilidad(id:ID! @whereKey):Habilidad @field(resolver:"HabilidadMutations@create")
  
  #CRUD preferencia habilidades
  create(habilidades_id:String!,cliente_id:String!):Preferencia_Habilidad @field(resolver:"")
  create(id:ID!,habilidades_id:String!,cliente_id:String!):Preferencia_Habilidad @field(resolver:"") 
}

type Query {
  #query de users
  userss: [User!] @all
  user(id:ID! @whereKey): User @find
  #query de cliente
  cliente_externos:[Cliente_Externo!] @all
  cliente_externo(id:ID! @whereKey): Cliente_Externo @find
  #Query de tecnicos
  tecnicos:[Tecnico]@all
  tecnico(id:ID! @whereKey): Tecnico @find
  #Query de cuidades
  cuidades: [Ciudad] @all
  cuidad(id:ID! @whereKey): Ciudad @find
  #Query de Habilidades
  habilidades:[Habilidad] @all
  habilidad(id:ID! @whereKey): Habilidad @find 
}

type Response {
  message: String
}
