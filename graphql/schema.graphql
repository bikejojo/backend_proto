"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON
#import ../vendor/marqant-lab/lighthouse-json/graphql/*.graphql
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


}
########################
        #models
#######################
"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!
    #"Non-unique name."
    #name: String!
    "Unique email address."
    email: String
    "When the email was verified."
    email_verified_at: DateTime
    "When the account was created."
    created_at: DateTime!
    "When the account was last updated."
    updated_at: DateTime!
    ci:String!
    type_user:Int!
    token: String!
    clientsExterns:[InternalClient!]! @hasMany
    technicians:[Technician!]! @hasMany

}

type Technician {
  id: ID!
  firstName: String!
  lastName: String!
  frontIdCard: String
  backIdCard: String
  email: String
  phoneNumber: String!
  password: String!
  photo: String
  userId: String!
  cityId: String!

  city: City! @belongsTo
  user: User! @belongsTo
  certifications: [Certification!]! @hasMany
  workPhotos: [WorkPhoto!] @hasMany
  technician: [TechnicianSkill!]! @hasMany
  requests: [Request!] @hasMany
  schedules: [TechnicianSchedule!] @hasMany
  associantions: [AssociationTechnClient!] @belongsTo
}

type TechnicianSkill {
  id: ID!
  technicianId: ID!
  skillId: ID!
  experience: String
  description: String

  technician: Technician! @belongsTo
  skill: [Skill!]! @belongsTo
}

type City {
  id: ID!
  name: String!

  externalClients: [InternalClient!]! @hasMany
  technicians: [Technician!]! @hasMany
}

type Skill {
  id: ID!
  name: String!

  skillPreferences: [SkillPreference!]! @hasMany
  technicianSkills: [TechnicianSkill!]! @hasMany
}

type Certification {
  id: ID
  name: String
  photoUrls: [String]
  certificationDate: String

  technician: Technician! @belongsTo
}

type WorkPhoto {
  id: ID!
  description: String!
  technicianId: ID!
  photoUrls: String

  technician: Technician! @belongsTo
}

type SkillPreference {
  skillId: String!
  clientId: String!

  skill: Skill! @belongsTo
  externalClient: InternalClient! @belongsTo
}

type InternalClient {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  loginMethod: String!
  photo: String!
  userId:ID!
  cityId:ID!

  user: User! @belongsTo
  city: City! @belongsTo
  skillPreferences: [SkillPreference!]! @hasMany
  requests: [Request!]! @hasMany
  schedules: [TechnicianSchedule!]! @hasMany
}

type ExternalClient {
    id: ID!
    firstName: String! @trim
    lastName: String! @trim
    phoneNumber: String! @trim

    associantions: AssociationTechnClient @belongsTo
}

type AssociationTechnClient {
    id:ID!
    clientId:ID!
    technicalId:ID!
    dateTimeCreated:String!

    technicals: Technician @hasMany
    clients: ExternalClient @hasMany
}

type ActivityType {
  id: ID!
  description: String!

  technicianSchedules: TechnicianSchedule! @belongsTo
}

type StateType {
  id: ID!
  description: String!
}

type Note {
  id: ID!
  description: String

  technicianSchedules: [TechnicianSchedule!]! @hasMany
}

type Request {
  id: ID!
  registrationTime: String!
  updateTime: String!
  expirationTime: String
  stateId: ID!
  clientId: ID!
  technicianId: ID!
  requestDescription: String
  latitude: String!
  longitude: String!
  locationDescription: String!

  technician: Technician! @belongsTo
  client: InternalClient! @belongsTo
  requestDetails: [RequestDetail!]! @hasMany
  state: StateType! @belongsTo
  requestPhotos: [RequestPhoto!]! @hasMany
}

type RequestDetail {
  id: ID!
  requestedSkills: String!
  requestId: ID!

  request: Request @belongsTo
}

type Appointment {
  id: ID!
  requestId: ID!
  stateId: ID!
  appointmentDescription: String
  latitude: String!
  longitude: String!
  locationDescription: String!
  result: String!
  registrationDateTime: String!
  endDateTime: String!
  duration: String!

  request: Request! @belongsTo
  state: StateType! @belongsTo
  schedule: TechnicianSchedule! @belongsTo
}

type TechnicianSchedule {
  id: ID!
  technicianId: ID!
  clientId: ID!
  noteId: ID!
  appointmentId: ID!
  activityTypeId: ID!
  creationDate: String!
  nextDate: String!
  nextDescription: String!

  technician: Technician! @belongsTo
  client: InternalClient! @belongsTo
  note: Note @belongsTo
  appointment: Appointment! @belongsTo
  activityType: ActivityType! @belongsTo
}

type RequestPhoto {
  id: ID!
  description: String!
  photoUrls: String
  requestId: ID!

  request: Request @belongsTo
}

##########################
     #endpoint de post
###########3##############
type Mutation {
################
   #CRUD users
################
    createUser(userRequest: JSON!): User @field(resolver:"UserMutations@create")
    updateUser(id: ID!, userRequest: JSON!): User @field(resolver:"UserMutations@update")
    deleteUser(id:ID! @whereKey): Response @field(resolver:"UserMutations@delete")
    login(ci: String! ,password:String!):responseLogin @field(resolver:"UserMutations@login")
    logout:responseLogin @field(resolver:"UserMutations@logout")
####################
    #CRUD tecnicos
###################
    createTechnician(technicianRequest: JSON!, frontIdCard: Upload, backIdCard: Upload ): TechnicianResponse @field(resolver:"TecnicoMutations@create")
    #createTechnician(technicianRequest: JSON!, frontIdCard: Upload, backIdCard: Upload, photo: Upload): TechnicianResponse @field(resolver:"TecnicoMutations@create")
    updateTechnician(id: ID!, technicianRequest: JSON! , photo: Upload): TechnicianResponse @field(resolver:"TecnicoMutations@update")
    deleteTecnico(id:ID! @whereKey): Response @field(resolver:"TecnicoMutations@delete")
#@guard(checks: ["sanctum"])
#####################
   #CRUD habilidades
#####################
    createSkill(name: String!): Skill @field(resolver:"HabilidadMutations@create")
    updateSkill(id: ID!, name: String!): Skill @field(resolver:"HabilidadMutations@create")
###########################
  #CRUD Tecnico habilidad
###########################
    assignTechnicianSkill(technicianId: ID!, skills: JSON): SkillResponse @field(resolver:"TecnicoHabilidadMutations@assign")
    updateTechnicianSkill(id: ID!, skills: [TechnicianSkillInput!]): SkillResponse @field(resolver:"TecnicoHabilidadMutations@update")
###########################
      #CRUD ciudad
###########################
    createCity(description: String!): City @field(resolver:"CiudadMutations@create")
    updateCity(id: ID!, description: String!): City @field(resolver:"CiudadMutations@create")
###########################
    #CRUD cliente_interno
###########################
    createClient(clientRequest:JSON! photo:Upload): ClientResponse @field(resolver:"ClienteInternoMutations@create")
    updateClient(id: ID!,clientRequest:JSON! photo:Upload ): ClientResponse @field(resolver:"ClienteInternoMutations@update")
    deleteClient(id: ID! @whereKey): Response @field(resolver:"ClienteInternoMutations@delete")
############################
    #CRUD cliente_externo
############################
    createClients(clientRequest:JSON!): ClientsResponse @field(resolver:"ClienteExternoMutations@create")
    updateClients(id: ID!,clientRequest:JSON!): ClientsResponse @field(resolver:"ClienteExternoMutations@update")
    deleteClients(id: ID! @whereKey): Response @field(resolver:"ClienteExternoMutations@delete")

#CRUD solicitudes
    #createRequest(request: RequestInput!): RequestResponse @field(resolver:"SolicitudesMutations@create")
    #updateRequest(requestRequest: JSON!): RequestResponse! @field(resolver:"SolicitudesMutations@modifyState")
#CRUD notas
    createNote(noteRequest: JSON!): Note! @field(resolver:"NoteMutations@create")
#CUD agenda
    indexSchedule(scheduleRequest: JSON!): ScheduleResponse @field(resolver:"AgendaMutations@index")
    indexTechnicianSchedule(scheduleRequest: JSON!): ScheduleResponse @field(resolver:"AgendaMutations@indexTecnico")
#CRUD preferencia habilidades
    createSkillPreference(skillId: String!, clientId: String!): SkillPreference @field(resolver:"PreferenciaHabilidadMutations@create")
    updateSkillPreference(id: ID!, skillId: String!, clientId: String!): SkillPreference @field(resolver:"PreferenciaHabilidadMutations@update")
}

###############################
        #endpoint de GET
###############################
type Query {
  ##########################
            #USER#
  ##########################
  getAllUsers: [User] @all
  getUserById(id: ID! @whereKey): User @find
  ##########################
          #TECHNICIAN#
  ##########################
  getAllTechnicians: [Technician] @all (model: "App\\Models\\Tecnico")
  getTechnicianById(id: ID! @whereKey): Technician @find (model: "App\\Models\\Tecnico")
  ##########################
           #CIUDAD#
  ##########################
  getAllCities: [City] @all (model: "App\\Models\\Ciudad")
  getCityById(id: ID! @whereKey): City @find (model: "App\\Models\\Ciudad")
  #########################
        #HABILIDAD#
  #########################
  getAllSkills: [Skill] @all (model: "App\\Models\\Habilidad")
  getSkillById(id: ID! @whereKey): Skill @find (model: "App\\Models\\Habilidad")
  #########################
        #TipoEstado
  #########################
  getAllStateTypes: [StateType] @all (model: "App\\Models\\Tipo_Estado")
  #########################
        #TipoActividad
  #########################
  getAllActivityTypes: [ActivityType] @all (model: "App\\Models\\Tipo_Actividad")
}
#############################
    #Modo salida de datos
#############################
type Response {
  message: String
}

type RequestResponse {
  message: String
  request: Request
}

type TechnicianResponse {
  user: User
  technician: Technician
  message: String
  upcomingmessage: String
}

type responseLogin {
  user: User
  technician: Technician
  message: String
}

type AppointmentResponse {
  appointment: Appointment
  message: String
}

type ClientResponse {
  message: String
  client: InternalClient!
  user: User!
}

type ClientsResponse {
  message: String
  clients: ExternalClient!
}

type SkillResponse {
  message: String
  technical: Technician
  skills: [TechnicianSkill]
}

type ScheduleResponse {
  message: String
  technicianSchedule: [TechnicianSchedule]
}

##################################
    #Modo de entrada de datos
##################################
input requestSolicituds {
    solicitudRequest: JSON!
    fotos_url: [Upload!]!
}

input TechnicianSkillInput {
  skillId: ID!
  experience: String!
  description: String
}
