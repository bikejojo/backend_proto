"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON
#import ../vendor/marqant-lab/lighthouse-json/graphql/*.graphql
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!
    #"Non-unique name."
    #name: String!
    "Unique email address."
    email: String
    "When the email was verified."
    email_verified_at: DateTime
    "When the account was created."
    created_at: DateTime!
    "When the account was last updated."
    updated_at: DateTime!
    ci:String!
    type_user:Int!
    token: String!
    clientsExterns:[ExternalClient!]! @hasMany
    technicians:[Technician!]! @hasMany

}

type Technician {
  id: ID!
  firstName: String!
  lastName: String!
  frontIdCard: String
  backIdCard: String
  email: String
  phoneNumber: String!
  password: String!
  photo: String
  userId: String!
  cityId: String!

  city: City! @belongsTo
  user: User! @belongsTo
  certifications: [Certification!]! @hasMany
  workPhotos: [WorkPhoto!] @hasMany
  technicianSkills: [TechnicianSkill!]! @hasMany
  requests: [Request!] @hasMany
  schedules: [TechnicianSchedule!] @hasMany
}

type TechnicianSkill {
  id: ID!
  technicianId: ID!
  skillId: ID!
  experience: String
  description: String

  technician: [Technician!]! @belongsTo
  skill: [Skill!]! @belongsTo
}

type City {
  id: ID!
  description: String!

  externalClients: [ExternalClient!]! @hasMany
  technicians: [Technician!]! @hasMany
}

type Skill {
  id: ID!
  name: String!

  skillPreferences: [SkillPreference!]! @hasMany
  technicianSkills: [TechnicianSkill!]! @hasMany
}

type Certification {
  id: ID
  name: String
  photoUrls: [String]
  certificationDate: String

  technician: Technician! @belongsTo
}

type WorkPhoto {
  id: ID!
  description: String!
  technicianId: ID!
  photoUrls: String

  technician: Technician! @belongsTo
}

type SkillPreference {
  skillId: String!
  clientId: String!

  skill: Skill! @belongsTo
  externalClient: ExternalClient! @belongsTo
}

type ExternalClient {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  loginMethod: String!
  photo: String!

  user: User! @belongsTo
  city: City! @belongsTo
  skillPreferences: [SkillPreference!]! @hasMany
  requests: [Request!]! @hasMany
  schedules: [TechnicianSchedule!]! @hasMany
}

type ActivityType {
  id: ID!
  description: String!

  technicianSchedules: TechnicianSchedule! @belongsTo
}

type StateType {
  id: ID!
  description: String!
}

type Note {
  id: ID!
  description: String

  technicianSchedules: [TechnicianSchedule!]! @hasMany
}

type Request {
  id: ID!
  registrationTime: String!
  updateTime: String!
  expirationTime: String
  stateId: ID!
  clientId: ID!
  technicianId: ID!
  requestDescription: String
  latitude: String!
  longitude: String!
  locationDescription: String!

  technician: Technician! @belongsTo
  client: ExternalClient! @belongsTo
  requestDetails: [RequestDetail!]! @hasMany
  state: StateType! @belongsTo
  requestPhotos: [RequestPhoto!]! @hasMany
}

type RequestDetail {
  id: ID!
  requestedSkills: String!
  requestId: ID!

  request: Request @belongsTo
}

type Appointment {
  id: ID!
  requestId: ID!
  stateId: ID!
  appointmentDescription: String
  latitude: String!
  longitude: String!
  locationDescription: String!
  result: String!
  registrationDateTime: String!
  endDateTime: String!
  duration: String!

  request: Request! @belongsTo
  state: StateType! @belongsTo
  schedule: TechnicianSchedule! @belongsTo
}

type TechnicianSchedule {
  id: ID!
  technicianId: ID!
  clientId: ID!
  noteId: ID!
  appointmentId: ID!
  activityTypeId: ID!
  creationDate: String!
  nextDate: String!
  nextDescription: String!

  technician: Technician! @belongsTo
  client: ExternalClient! @belongsTo
  note: Note @belongsTo
  appointment: Appointment! @belongsTo
  activityType: ActivityType! @belongsTo
}

type RequestPhoto {
  id: ID!
  description: String!
  photoUrls: String
  requestId: ID!

  request: Request @belongsTo
}
#CRUD users
type Mutation {
    createUser(userRequest: JSON!): User @field(resolver:"UserMutations@create")
    updateUser(id: ID!, userRequest: JSON!): User @field(resolver:"UserMutations@update")
    #deleteUser(id:ID! @whereKey): Response @field(resolver:"UserMutations@delete")
    login(ci: String! ,password:String!):responseLogin @field(resolver:"UserMutations@login")

#CRUD tecnicos

    createTechnician(technicianRequest: JSON!, frontIdCard: Upload, backIdCard: Upload, photo: Upload): Technician   @field(resolver:"TecnicoMutations@create")
    updateTechnician(id: ID!, technicianRequest: JSON!): Technician @field(resolver:"TecnicoMutations@update")
    #deleteTecnico(id:ID! @whereKey): Response @field(resolver:"TecnicoMutations@delete")
#@guard(checks: ["sanctum"])
#CRUD habilidades

    createSkill(name: String!): Skill @field(resolver:"HabilidadMutations@create")
    updateSkill(id: ID!, name: String!): Skill @field(resolver:"HabilidadMutations@create")
    #deleteHabilidad(id:ID! @whereKey):Habilidad @field(resolver:"HabilidadMutations@create")

#CRUD Tecnico habilidad

    assignTechnicianSkill(technicianId: ID!, skills: JSON): TechnicianSkill @field(resolver:"TecnicoHabilidadMutations@assign")
    updateTechnicianSkill(id: ID!, skills: [TechnicianSkillRequest!]!): [TechnicianSkill!]! @field(resolver:"TecnicoHabilidadMutations@update")

#CRUD ciudad

    createCity(description: String!): City @field(resolver:"CiudadMutations@create")
    updateCity(id: ID!, description: String!): City @field(resolver:"CiudadMutations@create")
    #deleteCiudad(id:ID! @whereKey):Ciudad @field(resolver:"CiudadMutations@create")

#CRUD Certificacion

    createCertification(certificationRequest: JSON, photoUrl: Upload): Certification @field(resolver:"CertificacionMutations@create")
    updateCertification(id: ID!, name: String!, photoUrl: String!, certificationDate: String!): Certification  @field(resolver:"CertificacionMutations@update")
    #deleteCertificacion(id:ID! @whereKey):Response @field(resolver:"CertificacionMutations@delete")

#CRUD Foto Trabajo

    createWorkPhoto(workPhotoRequest: JSON, photoUrls: [Upload!]!): WorkPhoto @field(resolver:"FotoTrabajoMutations@create")

#CRUD cliente_externo

    createClient(firstName: String!, email: String!, loginMethod: String!, photo: String!, userId: String!, cityId: String!): ExternalClient @field(resolver:"ClienteExternoMutations@create")
    updateClient(id: ID!, firstName: String!, email: String!, loginMethod: String!, photo: String!, userId: String!, cityId: String!): ExternalClient @field(resolver:"ClienteExternoMutations@update")
    deleteClient(id: ID! @whereKey): Response @field(resolver:"ClienteExternoMutations@delete")

#CRUD solicitudes

    createRequest(request: RequestInput!): RequestResponse @field(resolver:"SolicitudesMutations@create")
    updateRequest(requestRequest: JSON!): RequestResponse! @field(resolver:"SolicitudesMutations@modifyState")

#CRUD cita

    createAppointment(appointmentRequest: JSON!): Appointment! @field(resolver:"CitaMutations@create")
    updateAppointment(appointmentRequest: JSON!): AppointmentResponse! @field(resolver:"CitaMutations@update")

#CRUD notas

    createNote(noteRequest: JSON!): Note! @field(resolver:"NoteMutations@create")

#CUD agenda

    indexSchedule(scheduleRequest: JSON!): ScheduleResponse @field(resolver:"AgendaMutations@index")
    indexTechnicianSchedule(scheduleRequest: JSON!): ScheduleResponse @field(resolver:"AgendaMutations@indexTecnico")
#CRUD preferencia habilidades

    createSkillPreference(skillId: String!, clientId: String!): SkillPreference @field(resolver:"PreferenciaHabilidadMutations@create")
    updateSkillPreference(id: ID!, skillId: String!, clientId: String!): SkillPreference @field(resolver:"PreferenciaHabilidadMutations@update")
}

type Query {
  #query de users
  getAllUsers: [User] @all
  getUserById(id: ID! @whereKey): User @find
  #getTechnicianUser(id: ID!): User!! @field (resolver:"UserQuery@usuarioTecnico")

  getAllExternalClients: [ExternalClient!] @all
  getExternalClientById(id: ID! @whereKey): ExternalClient @find

  getAllTechnicians: [Technician] @all
  getTechnicianById(id: ID! @whereKey): Technician @find

  getAllCities: [City] @all
  getCityById(id: ID! @whereKey): City @find

  getAllSkills: [Skill] @all
  getSkillById(id: ID! @whereKey): Skill @find

  getAllCertifications: [Certification] @all
  getCertificationById(id: ID! @whereKey): Certification @find

  getAllStateTypes: [StateType] @all

  getAllActivityTypes: [ActivityType] @all

  getAllAgendaDetails: [TechnicianAgendaDetail!] @all
}

#Modo salida de datos
type Response {
  message: String
}

type RequestResponse {
  message: String
  request: Request
}

type TechnicianResponse {
  technician: Technician
  front_Url: String
  back_Url: String
}

type responseLogin {
  user: User!
  technician: Technician!
  message: String
}

type AppointmentResponse {
  appointment: Appointment
  message: String
}

type ClientResponse {
  message: String
  client: ExternalClient
}

type SkillResponse {
  message: String
  skills: [Skill]
}

type ScheduleResponse {
  message: String
  technicianSchedule: [TechnicianSchedule]
}

#Modo de entrada de datos
input Tecnico_HabilidadRequest {
  habilidad_id: ID!
  experiencia: String!
  descripcion: String!
}

input requestSolicituds {
    solicitudRequest: JSON!
    fotos_url: [Upload!]!
}
