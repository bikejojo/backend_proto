"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON
#import ../vendor/marqant-lab/lighthouse-json/graphql/*.graphql
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!
    #"Non-unique name."
    #name: String!
    "Unique email address."
    email: String
    "When the email was verified."
    email_verified_at: DateTime
    "When the account was created."
    created_at: DateTime!
    "When the account was last updated."
    updated_at: DateTime!
    ci:String!
    tipo_usuario:Int!
    token: String!
    clientes_externos:[Cliente_Externo!]! @hasMany
    tecnicos:[Tecnico!]! @hasMany

}

type Tecnico {
  id: ID!
  nombre: String!
  apellido: String!
  carnet_anverso: String
  carnet_reverso: String
  email: String
  telefono:String!
  contrasenia: String!
  foto: String
  users_id:String!
  ciudades_id:String!

  ciudades:Ciudad! @belongsTo
  users:User! @belongsTo
  certificaciones:[Certificacion!]! @hasMany
  fotoTrabajos:[Foto_Trabajo!] @hasMany
  tecnicoHabilidades:[Tecnico_Habilidad!]! @hasMany
}
type Cliente_Externo {
  id: ID!
  nombre:String!
  email:String!
  metodo_login:String!
  foto:String!

  users:User! @belongsTo
  ciudades:Ciudad! @belongsTo
  preferencia_habilidades:[Preferencia_Habilidad!]! @hasMany
}

#input Cliente_Externo(
#
#)
type Tecnico_Habilidad{
  id:ID!
  tecnico_id:ID!
  habilidad_id:ID!
  experiencia:String
  descripcion:String

  tecnicos: [Tecnico!]! @hasMany
  habilidades: [Habilidad!]! @hasMany
}

type Ciudad {
  id: ID!
  descripcion: String!

  clientes_externos: [Cliente_Externo!]! @hasMany
  tecnicos: [Tecnico!]! @hasMany
}

type Habilidad {
  id: ID!
  nombre: String!

  preferencia_habilidades: [Preferencia_Habilidad!]! @hasMany
  tecnico_habilidades:[Tecnico_Habilidad!]! @hasMany
}

type Preferencia_Habilidad{
  habilidades_id:String!
  cliente_id:String!

  habilidades: Habilidad! @belongsTo
  cliente_externos: Cliente_Externo! @belongsTo
}

type Certificacion{
  id:ID
  nombre:String
  foto_url:[String]
  fecha_certificacion:String

  tecnicos:Tecnico! @belongsTo
}

type Foto_Trabajo{
  id:ID!
  descripcion:String!
  tecnico_id:String!

  tecnicos: Tecnico! @belongsTo
}

type Mutation {

#CRUD users
createUser(userRequest: JSON!):User @field(resolver:"UserMutations@create")
#updateUser(id:ID! ,userRequest: JSON!): User @field(resolver:"UserMutations@update")
#deleteUser(id:ID! @whereKey): Response @field(resolver:"UserMutations@delete")

login(ci: String!,contrasenia:String!):String @field(resolver:"UserMutations@login")

#CRUD tecnicos
createTecnico(tecnicoRequest:JSON!,carnet_anverso: Upload,carnet_reverso: Upload, foto: Upload): Tecnico @field(resolver:"TecnicoMutations@create")
#updateTecnico(id:ID!,tecnicoRequest:JSON!): Tecnico @field(resolver:"TecnicoMutations@update")
#deleteTecnico(id:ID! @whereKey): Response @field(resolver:"TecnicoMutations@delete")


#CRUD habilidades
createHabilidad(nombre:String!):Habilidad @field(resolver:"HabilidadMutations@create")
updateHabilidad(id:ID!,nombre:String!):Habilidad @field(resolver:"HabilidadMutations@create")
#deleteHabilidad(id:ID! @whereKey):Habilidad @field(resolver:"HabilidadMutations@create")

#CRUD Tecnico habilidad
assignTecnicoHabilidad(tecnico_id:ID!,habilidades:JSON):Tecnico_Habilidad @field(resolver:"TecnicoHabilidadMutations@assign")
updateTecnicoHabilidad(id:ID!,habilidades: [Tecnico_HabilidadRequest!]!):[Tecnico_Habilidad!]! @field(resolver:"TecnicoHabilidadMutations@update")


 #CRUD cliente_externo
createCliente(nombre:String!,email:String!,metodo_login:String!,foto:String!,users_id:String!,ciudades_id:String!): Cliente_Externo @field(resolver:"ClienteExternoMutations@create")
updateCliente(id:ID!,nombre:String!,email:String!,metodo_login:String!,foto:String!,users_id:String!,ciudades_id:String!): Cliente_Externo @field(resolver:"ClienteExternoMutations@update")
deleteCliente(id:ID! @whereKey): Response @field(resolver:"ClienteExternoMutations@delete")

  #CRUD ciudad
createCiudad(descripcion:String! ):Ciudad @field(resolver:"CiudadMutations@create")
updateCiudad(id:ID!,descripcion:String!):Ciudad @field(resolver:"CiudadMutations@create")
deleteCiudad(id:ID! @whereKey):Ciudad @field(resolver:"CiudadMutations@create")

#CRUD preferencia habilidades
createPreferenciaHabilidad(habilidades_id:String!,cliente_id:String!):Preferencia_Habilidad @field(resolver:"PreferenciaHabilidadMutations@create")
updatePreferenciaHabilidad(id:ID!,habilidades_id:String!,cliente_id:String!):Preferencia_Habilidad @field(resolver:"PreferenciaHabilidadMutations@update")

#CRUD Certificacion
createCertificacion(nombre:String,foto_url:String,fecha_certificacion:String,tecnico_id:String):Certificacion @field(resolver:"CertificacionMutations@create")
updateCertificacion(id:ID!,nombre:String!,foto_url:String!,fecha_certificacion:String!):Certificacion @field(resolver:"CertificacionMutations@update")
deleteCertificacion(id:ID! @whereKey):Response @field(resolver:"CertificacionMutations@delete")
  #CRUD Foto Trabajo


}

type Query {
  #query de users
  getAllUser: [User] @all
  getUserById(id:ID! @whereKey): User @find
  #query de cliente
  getAllClienteExterno:[Cliente_Externo!] @all
  getClienteExternoById(id:ID! @whereKey): Cliente_Externo @find
  #Query de tecnicos
  getAllTecnico:[Tecnico]@all
  getTecnicoById(id:ID! @whereKey): Tecnico @find
  #Query de cuidades
  getAllCiudad: [Ciudad] @all
  getCiudadById(id:ID! @whereKey): Ciudad @find
  #Query de Habilidades
  getAllHabilidades:[Habilidad] @all
  habilidad(id:ID! @whereKey): Habilidad @find
}

type Response {
  message: String
}

type AuthPayload {
  user: User!
  token: String!
}
